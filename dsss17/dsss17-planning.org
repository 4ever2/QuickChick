FLOW OF TOPICS

Basic QC
  - completely automatic behavior
      - a few simple exercises -- find the bug in XX

small examples (lists and similar)

Coq typeclasses (intro)
  TypeClasses.v

core QC typeclasses
  - derived typeclasses (Show) -- maybe this will eventually be a general
    feature of Coq, but for now it's part of QC
  - generator monad
     - basic combinators (elements, oneOf, ...)
     - exercises: build a generator for XX
     - CoArbitrary
     - generators for polymorphic properties (nat, Li-Yao stuff, etc.)
  - shrinking
      - build a custom shrinker for XX
      - question: what is wrong with this shrinker?  
           - might generate the same example
           - might generate larger examples

(talk about the fact that longer test cases often find examples better --
see John's talk, and perhaps even use the "1-2-3-4-5 in order" example in
detail) 

return to the small examples

a typed version of Imp (ints and boolean)
  dynamic failures
  a little static type system
    investigate: can we easily detect issues with progress / preservation?
  maybe a little dynamic IFC analysis

more QC typeclasses
  sized?

ways of measuring distributions
   "Tuning random distributions is 
      - a creative process
      - based on observations
      - highly effective"
   (and see other observations in John's talk)

code coverage is a very bad success metric, but a rather good heuristic for
when your tests are not good enough

collect 
  - small example
  - forward pointer to third day?

Defining new one-constructor types to obtain different Gen behaviors (for
example).

mutation testing

mutation testing vs collect
  - collect informs about statistics of the distribution
  - mutation testing informs whether the distribution leads to good testing
  - John's x<y example?
  
final comments about testing
  - simple properties: very high payoff
      - round trip properties
      - regression testing
  - invariants that are going to be used for proof
  - complete specs may have smaller payoff

----------

Sized generators
  - GenSized class
    (there is a LOT to say about sized genreators!)

Polymorphic generators (nat)

custom shrinking

generating dependent generators
  - Using QuickChick to automatically derive generators satisfying 
    preconditions in the form of inductive datatypes
  - Notation
  - Precise form required from predicates
  - Narrowing caveats (too much backtracking if instantiating too early)
  - Workarounds (group predicates together - commit b2e4ad922e20b87818cb6162d714fe498e4dc356 from DeepSpec demo for an example)

super-simple compiler

?case study: IFC or lambda terms

--------

Case study: Vellvm

-------- 

?case study: DeepWeb

Zoe-proofs (the relevant typeclasses, mainly, plus just a hint of the
proofs)
  - 1-hour talk based on her section of popl submission

_________

Random observations:
  - Extraction doesn't work if any definitions are Admitted.  But in a
    testing context, it might actually be better to give them wrong
    definitions (and then discover that fact)!  
