HIGH PRIORITY:
  - We need a way of naming mutants so that, for example, we can test just a
    single mutant (that we have just added) instead of all mutants.  I'm
    going to guess that this will be so common a usage mode that we are
    going to want to name ALL mutants.  This will also be a more convenient
    way of printing them than printing diffs.
  - We probably also need a syntax for nested mutants
  - Re-make just the .vo files that have changed
       - At the same time, make sure that any file with an active QuickCheck
         command _is_ remade, so that the tests always get run

  * Make a simpler tactic for deriving equality.
       Derive Arbitrary, Show, Eq for file_access_mode.
  * play with precedence for ? -- should bind tigher than implication
       - and could we automatically make decidable props checkable, without ?

  - When displaying counterexamples, would it be easy to print the name of
    each bound variable along with the failing value that's been found for
    it? 

  - The top-level QC interface should expose as little as possible, so that
    modules that Import QC do not have their namespaces too polluted.  (And
    there should be a single file that most users import, rather than
    several.)
        - At the moment, most files that use QC include this at the top -- how
          much of it is really needed??
                 From QuickChick Require Export QuickChick.
                 Set Bullet Behavior "Strict Subproofs".
                 Import QcNotation. Open Scope qc_scope.
                 Import GenLow GenHigh.
                 Require Import List ZArith.
                 Import ListNotations.
                 Set Warnings "-extraction-opaque-accessed,-extraction".
                 Unset Refine Instance Mode.  (* Don't be too automatic! *)

  - Can we try again to fix the "Section... extends..." parsing issue?

  - "Test" mode should just go away.  Instead, we should have a general way
    of selecting just one particular mutant by either name or number
    (including the "null mutant," which we can take to be mutant 0 as a
    special case).

MINOR:
  - Figure out how to check different mutants in parallel 
  - fix:
       Fatal error: exception Failure("./.#Makefile does not exist?")
  - Catch C-c and terminate QC tool 
  - Add
       Set Warnings "-notation-overridden,-parsing".
    to all .v files to get rid of compilation warnings.
  - eliminate the rest of the compilation warnings (including nonexhaustive
    patterns!) 

COSMETIC:
  - Colorizing the output (using the opam ANSITerminal package) might be
    helpful for readability.  We will want to make it switch-selectable so
    that people using emacs compilation mode, for example, don't get messed
    up by it.  Though this may be fixable...
  
      (require 'ansi-color)
      (defun endless/colorize-compilation ()
        "Colorize from `compilation-filter-start' to `point'."
        (let ((inhibit-read-only t))
          (ansi-color-apply-on-region
           compilation-filter-start (point))))

      (add-hook 'compilation-filter-hook
                #'endless/colorize-compilation)  

ABOUT DECIDABILITY:
  - Can we make every EqDec automatically be a Dec?
  - Dec seems not to be working as intended.  Leo hoped that the ? would not
    be necessary to coerce a (decidable) Prop to a Checkable...
  - How do I create a Dec instance for options?  
  - How should we phrase specs like the one for filesystem operations in DW?
    Is there a way of using Dec to (semi?-)automatically calculate decision
    procedures for things like /\ and forall formulas?


TASKS FOR THE SUMMER SCHOOL:
  - documentation -- coqdoc comments, especially on the most user-visible
    parts!
  - test opam package

___________

Random observations:
  - Extraction doesn't work if any definitions are Admitted.  But in a
    testing context, it might actually be better to give them wrong
    definitions (and then discover that fact)!  
